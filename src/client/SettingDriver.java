package client;

import ADT.ListInterface;
import ADT.ArrayList;
import entity.GameMap;
import entity.Media;
import entity.Theme;
import java.io.File;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author 霆翔
 */
public class SettingDriver extends javax.swing.JPanel {

    int pressed;
    String selectedColor; //selected color(name)
    String path;// uploaded music path
    File selectedMusic;//selected music(name)
    String defMusicName;
    String upMusicName;//uploaded music name

    Media media;
    ListInterface playlist = new ArrayList<Media>();
    ListInterface theme = new ArrayList();
    Theme currentSetting = null;
    Media selectPath = null;
    String currentPath;
    Theme color;
    Clip clip;
    int play;
    GameMap currentTheme = new GameMap();

    /**
     * Creates new form SettingJPanel
     */
    public SettingDriver() {
        //initialize the settings
        initMusic();
        initColor();
        initComponents();
    }

    public void initMusic() {
        //initialize the defalt local song list
        playlist.add(new Media("Alone", "src/resources/Marshmello-Alone-_Official-Music-Video_.wav"));
        playlist.add(new Media("Fly", "src/resources/Marshmello-FLY-_Official-Music-Video_.wav"));
        playlist.add(new Media("Home", "src/resources/Marshmello-HoMe.wav"));
        playlist.add(new Media("Moving On", "src/resources/Marshmello-Moving-On-_Official-Music-Video_.wav"));
        playlist.add(new Media("Summer", "src/resources/Marshmello-Summer-_Official-Music-Video_-with-Lele-Pons.wav"));
        selectPath = (Media) playlist.getEntry(0);
        currentPath = selectPath.getPath();
    }

    public void initColor() {
        theme.add(new Theme("Blue", "src/resources/rightmouth.png", "src/resources/leftmouth.png", "src/resources/downmouth.png", "src/resources/upmouth.png", "src/resources/snakeimage.png", "src/resources/enemy.png"));
        theme.add(new Theme("Orange", "src/resources/rightmouth(o).png", "src/resources/leftmouth(o).png", "src/resources/downmouth(o).png", "src/resources/upmouth(o).png", "src/resources/snakeimage(o).png", "src/resources/enemy(o).png"));
        theme.add(new Theme("Green", "src/resources/rightmouth(g).png", "src/resources/leftmouth(g).png", "src/resources/downmouth(g).png", "src/resources/upmouth(g).png", "src/resources/snakeimage(g).png", "src/resources/enemy(g).png"));
        theme.add(new Theme("Red", "src/resources/rightmouth(r).png", "src/resources/leftmouth(r).png", "src/resources/downmouth(r).png", "src/resources/upmouth(r).png", "src/resources/snakeimage(r).png", "src/resources/enemy(r).png"));
        currentSetting = (Theme) theme.getEntry(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        themes = new javax.swing.JLabel();
        color_box = new javax.swing.JComboBox<>();
        music = new javax.swing.JLabel();
        music_box = new javax.swing.JComboBox<>();
        upload = new javax.swing.JButton();
        apply = new javax.swing.JButton();
        mouth = new javax.swing.JLabel();
        body = new javax.swing.JLabel();
        enemy = new javax.swing.JLabel();
        remove = new javax.swing.JButton();
        test_music = new javax.swing.JButton();
        setting = new javax.swing.JLabel();
        back = new javax.swing.JButton();

        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setName(""); // NOI18N

        themes.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        themes.setText("Theme");

        color_box.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        color_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Blue", "Orange", "Green", "Red"}));
        color_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        color_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                color_boxActionPerformed(evt);
            }
        });

        music.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        music.setText("Music");

        music_box.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        music_box.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Alone", "Fly", "Home", "Moving On", "Summer"}));
        music_box.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        music_box.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                music_boxActionPerformed(evt);
            }
        });

        upload.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        upload.setText("upload");
        upload.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadActionPerformed(evt);
            }
        });

        apply.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        apply.setText("Apply");
        apply.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });

        remove.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        remove.setText("remove");
        remove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionPerformed(evt);
            }
        });

        test_music.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        test_music.setText("Test Music");
        test_music.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                test_musicMousePressed(evt);
            }
        });

        setting.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        setting.setText("Setting");
        setting.setToolTipText("");

        back.setFont(new java.awt.Font("Times New Roman", 0, 11)); // NOI18N
        back.setText("Back");
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(221, 221, 221)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(themes, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(music, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(34, 34, 34)
                                                .addComponent(back)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 54, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(apply)
                                                        .addGap(412, 412, 412))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(music_box, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(test_music, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGroup(layout.createSequentialGroup()
                                                                        .addComponent(upload)
                                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                        .addComponent(remove)))
                                                        .addGap(297, 297, 297)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(color_box, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(body, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(mouth, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(18, 18, 18)
                                                                .addComponent(enemy, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(14, 14, 14)
                                                                .addComponent(setting, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                .addGap(396, 396, 396))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(back)
                                .addGap(33, 33, 33)
                                .addComponent(setting, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(themes, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(color_box, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(18, 18, 18)
                                                .addComponent(mouth, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(body, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(enemy, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(upload)
                                        .addComponent(remove)
                                        .addComponent(music_box, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(music, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(test_music)
                                .addGap(55, 55, 55)
                                .addComponent(apply)
                                .addGap(165, 165, 165))
        );

        //default
        mouth.setIcon(new javax.swing.ImageIcon("src/resources/rightmouth.png"));
        body.setIcon(new javax.swing.ImageIcon("src/resources/snakeimage.png"));
        enemy.setIcon(new javax.swing.ImageIcon("src/resources/enemy.png"));
    }// </editor-fold>                        

    private void applyActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stopMusic();
        JOptionPane.showMessageDialog(this, "Apply Succesfull!");
        //get the currentSetting, path
        Main menu = new Main();
        menu.save(currentSetting, selectPath);
    }

    private void color_boxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stopMusic();
        if (currentSetting == null) {
            color_box.setSelectedItem(0);
        }

        selectedColor = color_box.getSelectedItem().toString();
        currentSetting = (Theme) theme.contain(selectedColor);
        mouth.setIcon(new javax.swing.ImageIcon(currentSetting.getrMouth()));
        body.setIcon(new javax.swing.ImageIcon(currentSetting.getsBody()));
        enemy.setIcon(new javax.swing.ImageIcon(currentSetting.getEnemy()));

    }

    private void uploadActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stopMusic();
        path = null;

        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File(System.getProperty("user.home")));

        FileNameExtensionFilter extension = new FileNameExtensionFilter("*Musics", "wav");
        chooser.addChoosableFileFilter(extension);

        int filestate = chooser.showSaveDialog(null);

        if (filestate == JFileChooser.APPROVE_OPTION) {
            selectedMusic = chooser.getSelectedFile();
            upMusicName = chooser.getSelectedFile().getName();
            path = selectedMusic.getAbsolutePath();
        }
        if (path != null) {
            if (!path.matches("wav")) {
                JOptionPane.showMessageDialog(this, "Unsupported type files!(wav files only)");
            } else {
                music_box.addItem(upMusicName);
                media = new Media(upMusicName, path);
                playlist.add(media);
            }
        }
    }

    private void music_boxActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        defMusicName = music_box.getSelectedItem().toString();
        selectPath = (Media) playlist.contain(defMusicName);
        currentPath = selectPath.getPath();

    }

    private void removeActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stopMusic();
        int remove = music_box.getSelectedIndex();
        if (remove > 4) {
            music_box.removeItemAt(remove);
            playlist.remove(remove);
        } else {
            JOptionPane.showMessageDialog(this, "Cannot remove default music!");
        }
    }

    private void test_musicMousePressed(java.awt.event.MouseEvent evt) {
        // TODO add your handling code here:
        stopMusic();
        playMusic(currentPath);

    }

    private void backActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        stopMusic();
        Main menu = new Main();
        menu.back();
    }

    public void playMusic(String musiclocation) {
        //musiclocation="C:\\Users\\Mevicca\\Downloads\\JauntyGumption.wav";
        File musicPath = new File(musiclocation);

        try {
            if (musicPath.exists()) {
                AudioInputStream audioInput = AudioSystem.getAudioInputStream(musicPath);
                clip = AudioSystem.getClip();
                clip.open(audioInput);
                clip.start();
            } else {
                System.out.println("Can't find the file.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void stopMusic() {
        try {
            if (clip != null) {
                clip.stop();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton apply;
    private javax.swing.JButton back;
    private javax.swing.JLabel body;
    private javax.swing.JComboBox<String> color_box;
    private javax.swing.JLabel enemy;
    private javax.swing.JLabel mouth;
    private javax.swing.JLabel music;
    private javax.swing.JComboBox<String> music_box;
    private javax.swing.JButton remove;
    private javax.swing.JLabel setting;
    private javax.swing.JButton test_music;
    private javax.swing.JLabel themes;
    private javax.swing.JButton upload;
    // End of variables declaration                   

}
